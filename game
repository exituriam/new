<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clicker RPG Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f4f4f4;
        }
        .game-container {
            max-width: 600px;
            margin: auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        }
        .health-bar {
            width: 100%;
            height: 20px;
            margin-bottom: 10px;
            transition: all 0.3s ease;
        }
        .button {
            padding: 10px 20px;
            margin: 10px;
            font-size: 16px;
            cursor: pointer;
        }
        .upgrade-button {
            background-color: #4CAF50;
            color: white;
        }
        .autoclicker-button {
            background-color: #FF5733;
            color: white;
        }
        .coin-display, .damage-display {
            font-size: 24px;
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Clicker RPG</h1>
        <div class="coin-display">Coins: 0</div>
        <div class="damage-display">Damage per Second: 0</div>
        
        <!-- Health Bar -->
        <div class="health-bar" id="health-bar"></div>
        
        <div id="enemy-health">Health: 10/15</div>

        <button id="click-btn" class="button">Click to Deal Damage</button>
        <button id="upgrade-damage" class="button upgrade-button">Buy x1.5 Damage (100 coins)</button>
        <button id="upgrade-health" class="button upgrade-button">Buy x2 Health (50 coins)</button>
        <button id="autoclicker" class="button autoclicker-button">Buy Autoclicker (1000 coins)</button>

        <div id="status"></div>
    </div>

    <script>
        let coins = 0;
        let damage = 1;
        let health = 10;
        let maxHealth = getRandomHealth();
        let enemyHealth = maxHealth;
        let autoclickerRate = 0;
        let upgradeDamageCost = 100;
        let upgradeHealthCost = 50;
        let autoclickerCost = 1000;
        let clicksPerSecond = 0; // This tracks the clicks per second

        // Elements
        const coinDisplay = document.querySelector('.coin-display');
        const damageDisplay = document.querySelector('.damage-display');
        const healthBar = document.getElementById('health-bar');
        const enemyHealthDisplay = document.getElementById('enemy-health');
        const statusDisplay = document.getElementById('status');
        const clickBtn = document.getElementById('click-btn');
        const upgradeDamageBtn = document.getElementById('upgrade-damage');
        const upgradeHealthBtn = document.getElementById('upgrade-health');
        const autoclickerBtn = document.getElementById('autoclicker');

        // Time tracking to calculate clicks per second
        let lastClickTime = 0;

        // Function to get a random enemy health between 5 and 15
        function getRandomHealth() {
            return Math.floor(Math.random() * (15 - 5 + 1)) + 5;
        }

        // Function to update health bar color and size
        function updateHealthBar() {
            let healthRatio = enemyHealth / maxHealth;

            // Change color based on health ratio
            if (healthRatio >= 0.75) {
                healthBar.style.backgroundColor = '#00ff00'; // Green
            } else if (healthRatio >= 0.25) {
                healthBar.style.backgroundColor = '#ffcc00'; // Yellow
            } else {
                healthBar.style.backgroundColor = '#ff0000'; // Red
            }

            // Update the size of the health bar (width is a percentage of maxHealth)
            healthBar.style.width = `${Math.max(healthRatio * 100, 0)}%`;
        }

        // Functions to update the game state
        function updateGame() {
            coinDisplay.textContent = `Coins: ${coins}`;
            damageDisplay.textContent = `Damage per Second: ${Math.round(calculateDPS())}`;
            updateHealthBar(); // Update health bar color and size
            enemyHealthDisplay.textContent = `Health: ${enemyHealth}/${maxHealth}`; // Display health as current/max
        }

        function dealDamage() {
            const currentTime = Date.now();
            clicksPerSecond = (1000 / (currentTime - lastClickTime)) || 0;  // Calculate clicks per second
            lastClickTime = currentTime;
            enemyHealth -= damage;
            if (enemyHealth <= 0) {
                coins += Math.floor(0.5 * Math.pow(maxHealth, 1.3) * (Math.random() + 0.5));
                maxHealth = getRandomHealth(); // Randomize the health after defeating the enemy
                enemyHealth = maxHealth; // Reset the enemy health to the new max health
                statusDisplay.textContent = 'You killed the enemy! Coins earned.';
            } else {
                statusDisplay.textContent = `You dealt ${damage} damage!`;
            }
            updateGame();
        }

        function buyDamageUpgrade() {
            if (coins >= upgradeDamageCost) {
                coins -= upgradeDamageCost;
                damage *= 1.5;
                upgradeDamageCost *= 2;
                statusDisplay.textContent = `Damage upgraded! Now you deal ${damage} damage per click.`;
                updateGame();
            } else {
                statusDisplay.textContent = `Not enough coins for damage upgrade.`;
            }
        }

        function buyHealthUpgrade() {
            if (coins >= upgradeHealthCost) {
                coins -= upgradeHealthCost;
                maxHealth *= 2; // Double the health with each upgrade
                enemyHealth = maxHealth;
                upgradeHealthCost *= 3;
                statusDisplay.textContent = `Enemy health doubled! Now it has ${maxHealth} HP.`;
                updateGame();
            } else {
                statusDisplay.textContent = `Not enough coins for health upgrade.`;
            }
        }

        function buyAutoclicker() {
            if (coins >= autoclickerCost) {
                coins -= autoclickerCost;
                autoclickerRate += 2;
                autoclickerCost *= 2;
                statusDisplay.textContent = `Autoclicker purchased! It deals ${autoclickerRate} damage per second.`;
                updateGame();
            } else {
                statusDisplay.textContent = `Not enough coins for autoclicker.`;
            }
        }

        function autoclick() {
            if (autoclickerRate > 0) {
                enemyHealth -= autoclickerRate / 10;
                if (enemyHealth <= 0) {
                    coins += Math.floor(0.5 * Math.pow(maxHealth, 1.3) * (Math.random() + 0.5));
                    maxHealth = getRandomHealth(); // Randomize the health after defeating the enemy
                    enemyHealth = maxHealth; // Reset the enemy health to the new max health
                }
            }
            updateGame();
        }

        // Calculate DPS (damage per second)
        function calculateDPS() {
            return (damage * clicksPerSecond) + autoclickerRate;
        }

        // Event listeners
        clickBtn.addEventListener('click', dealDamage);
        upgradeDamageBtn.addEventListener('click', buyDamageUpgrade);
        upgradeHealthBtn.addEventListener('click', buyHealthUpgrade);
        autoclickerBtn.addEventListener('click', buyAutoclicker);

        // Game loop for autoclicker
        setInterval(autoclick, 100);

        // Update DPS every second
        setInterval(updateGame, 1000);
    </script>
</body>
</html>
